/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
import { Scripts } from "../resources/scripts/client/Client";
export declare namespace Pages {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Pages are the pages in your Webflow site.
 */
export declare class Pages {
    protected readonly _options: Pages.Options;
    constructor(_options: Pages.Options);
    /**
     * List of all pages for a site.
     *
     * Required scope | `pages:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.PagesListRequest} request
     * @param {Pages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.pages.list("580e63e98c9a982ac9b8b741", {
     *         localeId: "65427cf400e02b306eaa04a0"
     *     })
     */
    list(siteId: string, request?: Webflow.PagesListRequest, requestOptions?: Pages.RequestOptions): Promise<Webflow.PageList>;
    /**
     * Get metadata information for a single page.
     *
     * Required scope | `pages:read`
     *
     * @param {string} pageId - Unique identifier for a Page
     * @param {Webflow.PagesGetMetadataRequest} request
     * @param {Pages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.pages.getMetadata("63c720f9347c2139b248e552", {
     *         localeId: "65427cf400e02b306eaa04a0"
     *     })
     */
    getMetadata(pageId: string, request?: Webflow.PagesGetMetadataRequest, requestOptions?: Pages.RequestOptions): Promise<Webflow.Page>;
    /**
     * Update Page-level metadata, including SEO and Open Graph fields.
     *
     * Required scope | `pages:write`
     *
     * @param {string} pageId - Unique identifier for a Page
     * @param {Webflow.UpdatePageSettingsRequest} request
     * @param {Pages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.pages.updatePageSettings("63c720f9347c2139b248e552", {
     *         localeId: "65427cf400e02b306eaa04a0",
     *         body: {
     *             id: "6596da6045e56dee495bcbba",
     *             siteId: "6258612d1ee792848f805dcf",
     *             title: "Guide to the Galaxy",
     *             slug: "guide-to-the-galaxy",
     *             createdOn: "2024-03-11T10:42:00Z",
     *             lastUpdated: "2024-03-11T10:42:42Z",
     *             archived: false,
     *             draft: false,
     *             canBranch: true,
     *             isBranch: false,
     *             seo: {
     *                 title: "The Ultimate Hitchhiker's Guide to the Galaxy",
     *                 description: "Everything you need to know about the galaxy, from avoiding Vogon poetry to the importance of towels."
     *             },
     *             openGraph: {
     *                 title: "Explore the Cosmos with The Ultimate Guide",
     *                 titleCopied: false,
     *                 description: "Dive deep into the mysteries of the universe with your guide to everything galactic.",
     *                 descriptionCopied: false
     *             },
     *             localeId: "653fd9af6a07fc9cfd7a5e57",
     *             publishedPath: "/en-us/guide-to-the-galaxy"
     *         }
     *     })
     */
    updatePageSettings(pageId: string, request: Webflow.UpdatePageSettingsRequest, requestOptions?: Pages.RequestOptions): Promise<Webflow.Page>;
    /**
     * Get static content from a static page. This includes text nodes, image nodes and component instances.
     * To retrieve the contents of components in the page use the [get component content](/data/reference/pages-and-components/components/get-content) endpoint.
     *
     * <Note>If you do not provide a Locale ID in your request, the response will return any content that can be localized from the Primary locale.</Note>
     *
     * Required scope | `pages:read`
     *
     * @param {string} pageId - Unique identifier for a Page
     * @param {Webflow.PagesGetContentRequest} request
     * @param {Pages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.pages.getContent("63c720f9347c2139b248e552", {
     *         localeId: "65427cf400e02b306eaa04a0"
     *     })
     */
    getContent(pageId: string, request?: Webflow.PagesGetContentRequest, requestOptions?: Pages.RequestOptions): Promise<Webflow.Dom>;
    /**
     * This endpoint updates content on a static page in **secondary locales**. It supports updating up to 1000 nodes in a single request.
     *
     * Before making updates:
     * 1. Use the [get page content](/data/reference/pages-and-components/pages/get-content) endpoint to identify available content nodes and their types
     * 2. If the page has component instances, retrieve the component's properties that you'll override using the [get component properties](/data/reference/pages-and-components/components/get-properties) endpoint
     *
     * <Note>
     *   This endpoint is specifically for localized pages. Ensure that the specified `localeId` is a valid **secondary locale** for the site otherwise the request will fail.
     * </Note>
     *
     * Required scope | `pages:write`
     *
     * @param {string} pageId - Unique identifier for a Page
     * @param {Webflow.PageDomWrite} request
     * @param {Pages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.pages.updateStaticContent("63c720f9347c2139b248e552", {
     *         localeId: "localeId",
     *         nodes: [{
     *                 nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad623",
     *                 text: "<h1>The Hitchhiker's Guide to the Galaxy</h1>"
     *             }, {
     *                 nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad627",
     *                 text: "<div><h3>Don't Panic!</h3><p>Always know where your towel is.</p></div>"
     *             }, {
     *                 nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad629",
     *                 propertyOverrides: [{
     *                         propertyId: "7dd14c08-2e96-8d3d-2b19-b5c03642a0f0",
     *                         text: "<div><h1>Time is an <em>illusion</em></h1></div>"
     *                     }, {
     *                         propertyId: "7dd14c08-2e96-8d3d-2b19-b5c03642a0f1",
     *                         text: "Life, the Universe and Everything"
     *                     }]
     *             }]
     *     })
     */
    updateStaticContent(pageId: string, request: Webflow.PageDomWrite, requestOptions?: Pages.RequestOptions): Promise<Webflow.UpdateStaticContentResponse>;
    protected _scripts: Scripts | undefined;
    get scripts(): Scripts;
    protected _getAuthorizationHeader(): Promise<string>;
}
