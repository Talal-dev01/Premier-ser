/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Webflow from "../../../../../index";
export declare namespace Items {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Items {
    protected readonly _options: Items.Options;
    constructor(_options: Items.Options);
    /**
     * List of all Items within a Collection.
     *
     * Required scope | `CMS:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsListItemsRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.listItems("580e63fc8c9a982ac9b8b745")
     */
    listItems(collectionId: string, request?: Webflow.collections.ItemsListItemsRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItemList>;
    /**
     * Create Item(s) in a Collection.
     *
     *
     * To create items across multiple locales, please use [this endpoint.](/v2.0.0/data/reference/cms/collection-items/staged-items/create-items)
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsCreateItemRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.createItem("580e63fc8c9a982ac9b8b745", {
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: {
     *             name: "Pan Galactic Gargle Blaster Recipe",
     *             slug: "pan-galactic-gargle-blaster"
     *         }
     *     })
     *
     * @example
     *     await client.collections.items.createItem("580e63fc8c9a982ac9b8b745", {
     *         items: [{
     *                 isArchived: false,
     *                 isDraft: false,
     *                 fieldData: {
     *                     name: "Senior Data Analyst",
     *                     slug: "senior-data-analyst"
     *                 }
     *             }, {
     *                 isArchived: false,
     *                 isDraft: false,
     *                 fieldData: {
     *                     name: "Product Manager",
     *                     slug: "product-manager"
     *                 }
     *             }]
     *     })
     */
    createItem(collectionId: string, request: Webflow.collections.ItemsCreateItemRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Delete Items from a Collection.
     *
     * **Note:** If the `cmsLocaleId` parameter is undefined or empty and the items are localized, items will be deleted only in the primary locale.
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsDeleteItemsRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.deleteItems("580e63fc8c9a982ac9b8b745")
     */
    deleteItems(collectionId: string, request?: Webflow.collections.ItemsDeleteItemsRequest, requestOptions?: Items.RequestOptions): Promise<void>;
    /**
     * Update a single item or multiple items (up to 100) in a Collection.
     *
     * **Note:** If the `cmsLocaleId` parameter is undefined or empty and the items are localized, items will be updated only in the primary locale.
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsUpdateItemsRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.updateItems("580e63fc8c9a982ac9b8b745", {
     *         items: [{
     *                 id: "66f6ed9576ddacf3149d5ea6",
     *                 cmsLocaleId: "66f6e966c9e1dc700a857ca5",
     *                 fieldData: {
     *                     name: "Ne Paniquez Pas",
     *                     slug: "ne-paniquez-pas"
     *                 }
     *             }, {
     *                 id: "66f6ed9576ddacf3149d5ea6",
     *                 cmsLocaleId: "66f6e966c9e1dc700a857ca4",
     *                 fieldData: {
     *                     name: "No Entrar en P\u00E1nico",
     *                     slug: "no-entrar-en-panico"
     *                 }
     *             }, {
     *                 id: "66f6ed9576ddacf3149d5eaa",
     *                 cmsLocaleId: "66f6e966c9e1dc700a857ca5",
     *                 fieldData: {
     *                     name: "Au Revoir et Merci pour Tous les Poissons",
     *                     slug: "au-revoir-et-merci"
     *                 }
     *             }, {
     *                 id: "66f6ed9576ddacf3149d5eaa",
     *                 cmsLocaleId: "66f6e966c9e1dc700a857ca4",
     *                 fieldData: {
     *                     name: "Hasta Luego y Gracias por Todo el Pescado",
     *                     slug: "hasta-luego-y-gracias"
     *                 }
     *             }]
     *     })
     *
     * @example
     *     await client.collections.items.updateItems("580e63fc8c9a982ac9b8b745", {
     *         items: [{
     *                 id: "580e64008c9a982ac9b8b754",
     *                 isArchived: false,
     *                 isDraft: false,
     *                 fieldData: {
     *                     name: "Senior Data Analyst",
     *                     slug: "senior-data-analyst"
     *                 }
     *             }, {
     *                 id: "580e64008c9a982ac9b8b754",
     *                 isArchived: false,
     *                 isDraft: false,
     *                 fieldData: {
     *                     name: "Product Manager",
     *                     slug: "product-manager"
     *                 }
     *             }]
     *     })
     */
    updateItems(collectionId: string, request?: Webflow.collections.ItemsUpdateItemsRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * List of all live Items within a Collection.
     *
     * Required scope | `CMS:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsListItemsLiveRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.listItemsLive("580e63fc8c9a982ac9b8b745")
     */
    listItemsLive(collectionId: string, request?: Webflow.collections.ItemsListItemsLiveRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItemList>;
    /**
     * Create live Item(s) in a Collection. The Item(s) will be published to the live site.
     *
     *
     * To create items across multiple locales, [please use this endpoint.](/v2.0.0/data/reference/cms/collection-items/staged-items/create-items)
     *
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsCreateItemLiveRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.createItemLive("580e63fc8c9a982ac9b8b745", {
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: {
     *             name: "Pan Galactic Gargle Blaster Recipe",
     *             slug: "pan-galactic-gargle-blaster"
     *         }
     *     })
     *
     * @example
     *     await client.collections.items.createItemLive("580e63fc8c9a982ac9b8b745", {
     *         items: [{
     *                 isArchived: false,
     *                 isDraft: false,
     *                 fieldData: {
     *                     name: "Senior Data Analyst",
     *                     slug: "senior-data-analyst"
     *                 }
     *             }, {
     *                 isArchived: false,
     *                 isDraft: false,
     *                 fieldData: {
     *                     name: "Product Manager",
     *                     slug: "product-manager"
     *                 }
     *             }]
     *     })
     */
    createItemLive(collectionId: string, request: Webflow.collections.ItemsCreateItemLiveRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Remove an item or multiple items (up to 100 items) from the live site. Deleting published items will unpublish the items from the live site and set them to draft.
     *
     * **Note:** If the `cmsLocaleId` parameter is undefined or empty and the items are localized, items will be unpublished only in the primary locale.
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsDeleteItemsLiveRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.deleteItemsLive("580e63fc8c9a982ac9b8b745")
     */
    deleteItemsLive(collectionId: string, request?: Webflow.collections.ItemsDeleteItemsLiveRequest, requestOptions?: Items.RequestOptions): Promise<void>;
    /**
     * Update a single live item or multiple live items (up to 100) in a Collection
     *
     * **Note:** If the `cmsLocaleId` parameter is undefined or empty and the items are localized, items will be updated only in the primary locale.
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsUpdateItemsLiveRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.updateItemsLive("580e63fc8c9a982ac9b8b745", {
     *         items: [{
     *                 id: "66f6ed9576ddacf3149d5ea6",
     *                 cmsLocaleId: "66f6e966c9e1dc700a857ca5",
     *                 fieldData: {
     *                     name: "Ne Paniquez Pas",
     *                     slug: "ne-paniquez-pas"
     *                 }
     *             }, {
     *                 id: "66f6ed9576ddacf3149d5ea6",
     *                 cmsLocaleId: "66f6e966c9e1dc700a857ca4",
     *                 fieldData: {
     *                     name: "No Entrar en P\u00E1nico",
     *                     slug: "no-entrar-en-panico"
     *                 }
     *             }, {
     *                 id: "66f6ed9576ddacf3149d5eaa",
     *                 cmsLocaleId: "66f6e966c9e1dc700a857ca5",
     *                 fieldData: {
     *                     name: "Au Revoir et Merci pour Tous les Poissons",
     *                     slug: "au-revoir-et-merci"
     *                 }
     *             }, {
     *                 id: "66f6ed9576ddacf3149d5eaa",
     *                 cmsLocaleId: "66f6e966c9e1dc700a857ca4",
     *                 fieldData: {
     *                     name: "Hasta Luego y Gracias por Todo el Pescado",
     *                     slug: "hasta-luego-y-gracias"
     *                 }
     *             }]
     *     })
     *
     * @example
     *     await client.collections.items.updateItemsLive("580e63fc8c9a982ac9b8b745", {
     *         items: [{
     *                 id: "580e64008c9a982ac9b8b754",
     *                 isArchived: false,
     *                 isDraft: false,
     *                 fieldData: {
     *                     name: "Senior Data Analyst",
     *                     slug: "senior-data-analyst"
     *                 }
     *             }, {
     *                 id: "580e64008c9a982ac9b8b754",
     *                 isArchived: false,
     *                 isDraft: false,
     *                 fieldData: {
     *                     name: "Product Manager",
     *                     slug: "product-manager"
     *                 }
     *             }]
     *     })
     */
    updateItemsLive(collectionId: string, request?: Webflow.collections.ItemsUpdateItemsLiveRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItemListNoPagination>;
    /**
     * Create an item or multiple items in a CMS Collection across multiple corresponding locales.
     *
     * **Notes:**
     *   - This endpoint can create up to 100 items in a request.
     *   - If the `cmsLocaleIds` parameter is undefined or empty and localization is enabled, items will only be created in the primary locale.
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.CreateBulkCollectionItemRequestBody} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.createItems("580e63fc8c9a982ac9b8b745", {
     *         cmsLocaleIds: ["66f6e966c9e1dc700a857ca3", "66f6e966c9e1dc700a857ca4", "66f6e966c9e1dc700a857ca5"],
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: {
     *             name: "Don\u2019t Panic",
     *             slug: "dont-panic"
     *         }
     *     })
     *
     * @example
     *     await client.collections.items.createItems("580e63fc8c9a982ac9b8b745", {
     *         cmsLocaleIds: ["66f6e966c9e1dc700a857ca3", "66f6e966c9e1dc700a857ca4"],
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: [{
     *                 name: "Don\u2019t Panic",
     *                 slug: "dont-panic"
     *             }, {
     *                 name: "So Long and Thanks for All the Fish",
     *                 slug: "so-long-and-thanks"
     *             }]
     *     })
     */
    createItems(collectionId: string, request: Webflow.collections.CreateBulkCollectionItemRequestBody, requestOptions?: Items.RequestOptions): Promise<Webflow.BulkCollectionItem>;
    /**
     * Get details of a selected Collection Item.
     *
     * Required scope | `CMS:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.collections.ItemsGetItemRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.getItem("580e63fc8c9a982ac9b8b745", "580e64008c9a982ac9b8b754")
     */
    getItem(collectionId: string, itemId: string, request?: Webflow.collections.ItemsGetItemRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Delete an Item from a Collection. This endpoint does not currently support bulk deletion.
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.collections.ItemsDeleteItemRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.deleteItem("580e63fc8c9a982ac9b8b745", "580e64008c9a982ac9b8b754")
     */
    deleteItem(collectionId: string, itemId: string, request?: Webflow.collections.ItemsDeleteItemRequest, requestOptions?: Items.RequestOptions): Promise<void>;
    /**
     * Update a selected Item in a Collection.
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.CollectionItemPatchSingle} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.updateItem("580e63fc8c9a982ac9b8b745", "580e64008c9a982ac9b8b754", {
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: {
     *             name: "Pan Galactic Gargle Blaster Recipe",
     *             slug: "pan-galactic-gargle-blaster"
     *         }
     *     })
     */
    updateItem(collectionId: string, itemId: string, request: Webflow.CollectionItemPatchSingle, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Get details of a selected Collection live Item.
     *
     * Required scope | `CMS:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.collections.ItemsGetItemLiveRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.getItemLive("580e63fc8c9a982ac9b8b745", "580e64008c9a982ac9b8b754")
     */
    getItemLive(collectionId: string, itemId: string, request?: Webflow.collections.ItemsGetItemLiveRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Remove a live item from the site. Removing a published item will unpublish the item from the live site and set it to draft.
     *
     * This endpoint does not currently support bulk deletion.
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.collections.ItemsDeleteItemLiveRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.deleteItemLive("580e63fc8c9a982ac9b8b745", "580e64008c9a982ac9b8b754")
     */
    deleteItemLive(collectionId: string, itemId: string, request?: Webflow.collections.ItemsDeleteItemLiveRequest, requestOptions?: Items.RequestOptions): Promise<void>;
    /**
     * Update a selected live Item in a Collection. The updates for this Item will be published to the live site.
     *
     * Required scope | `CMS:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.CollectionItemPatchSingle} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.updateItemLive("580e63fc8c9a982ac9b8b745", "580e64008c9a982ac9b8b754", {
     *         isArchived: false,
     *         isDraft: false,
     *         fieldData: {
     *             name: "Pan Galactic Gargle Blaster Recipe",
     *             slug: "pan-galactic-gargle-blaster"
     *         }
     *     })
     */
    updateItemLive(collectionId: string, itemId: string, request: Webflow.CollectionItemPatchSingle, requestOptions?: Items.RequestOptions): Promise<Webflow.CollectionItem>;
    /**
     * Publish an item or multiple items.
     *
     * Required scope | `cms:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Webflow.collections.ItemsPublishItemRequest} request
     * @param {Items.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.items.publishItem("580e63fc8c9a982ac9b8b745", {
     *         itemIds: ["itemIds"]
     *     })
     */
    publishItem(collectionId: string, request: Webflow.collections.ItemsPublishItemRequest, requestOptions?: Items.RequestOptions): Promise<Webflow.collections.ItemsPublishItemResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
