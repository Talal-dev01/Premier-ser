/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
import { Fields } from "../resources/fields/client/Client";
import { Items } from "../resources/items/client/Client";
export declare namespace Collections {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
/**
 * Collections are CMS collections of items.
 */
export declare class Collections {
    protected readonly _options: Collections.Options;
    constructor(_options: Collections.Options);
    /**
     * List of all Collections within a Site.
     *
     * Required scope | `cms:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.list("580e63e98c9a982ac9b8b741")
     */
    list(siteId: string, requestOptions?: Collections.RequestOptions): Promise<Webflow.CollectionList>;
    /**
     * Create a Collection for a site.
     *
     * Required scope | `cms:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.CollectionsCreateRequest} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.create("580e63e98c9a982ac9b8b741", {
     *         displayName: "Blog Posts",
     *         singularName: "Blog Post",
     *         slug: "posts"
     *     })
     */
    create(siteId: string, request: Webflow.CollectionsCreateRequest, requestOptions?: Collections.RequestOptions): Promise<Webflow.Collection>;
    /**
     * Get the full details of a collection from its ID.
     *
     * Required scope | `cms:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.get("580e63fc8c9a982ac9b8b745")
     */
    get(collectionId: string, requestOptions?: Collections.RequestOptions): Promise<Webflow.Collection>;
    /**
     * Delete a collection using its ID.
     *
     * Required scope | `cms:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.collections.delete("580e63fc8c9a982ac9b8b745")
     */
    delete(collectionId: string, requestOptions?: Collections.RequestOptions): Promise<void>;
    protected _fields: Fields | undefined;
    get fields(): Fields;
    protected _items: Items | undefined;
    get items(): Items;
    protected _getAuthorizationHeader(): Promise<string>;
}
