/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
export declare namespace Products {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Products {
    protected readonly _options: Products.Options;
    constructor(_options: Products.Options);
    /**
     * Retrieve all products for a site.
     *
     * Use `limit` and `offset` to page through all products with subsequent requests. All SKUs for each product
     * will also be fetched and returned. The `limit`, `offset` and `total` values represent Products only and do not include any SKUs.
     *
     * Required scope | `ecommerce:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.ProductsListRequest} request
     * @param {Products.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.products.list("580e63e98c9a982ac9b8b741")
     */
    list(siteId: string, request?: Webflow.ProductsListRequest, requestOptions?: Products.RequestOptions): Promise<Webflow.ProductAndSkUsList>;
    /**
     * Create a new product and SKU.
     *
     * When you create a product, you will always create a SKU, since a Product Item must have, at minimum, a single SKU.
     *
     * To create a Product with multiple SKUs - for example a T-shirt in sizes small, medium and large:
     *   - Create parameters in `sku-properties`, also known as [product options and variants.](https://help.webflow.com/hc/en-us/articles/33961334531347-Create-product-options-and-variants).
     *   - A single `sku-property` would be `color`. Within the `color` property, list the various colors of T-shirts as an array of `enum` values: `royal-blue`, `crimson-red`, and `forrest-green`.
     *   - Once, you've created a Product and its `sku-properties` with `enum` values, Webflow will create a **default SKU**, which will automatically be a combination of the first `sku-properties` you've created.
     *   - In our example, the default SKU will be a Royal Blue T-Shirt, because our first `enum` of our Color `sku-property` is Royal Blue.
     *   - After you've created your product, you can create additional SKUs using the [Create SKU endpoint.](/data/reference/ecommerce/products/create-sku)
     *
     * Upon creation, the default product type will be `Advanced`, which ensures all Product and SKU fields will be shown to users in the Designer.
     *
     * Required scope | `ecommerce:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.ProductSkuCreate} request
     * @param {Products.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.products.create("580e63e98c9a982ac9b8b741")
     */
    create(siteId: string, request?: Webflow.ProductSkuCreate, requestOptions?: Products.RequestOptions): Promise<Webflow.ProductAndSkUs>;
    /**
     * Retrieve a single product by its ID. All of its SKUs will also be
     * retrieved.
     *
     * Required scope | `ecommerce:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} productId - Unique identifier for a Product
     * @param {Products.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.products.get("580e63e98c9a982ac9b8b741", "580e63fc8c9a982ac9b8b745")
     */
    get(siteId: string, productId: string, requestOptions?: Products.RequestOptions): Promise<Webflow.ProductAndSkUs>;
    /**
     * Update an existing Product.
     *
     * Updating an existing Product will set the product type to `Advanced`, which ensures all Product and SKU fields will be shown to users in the Designer.
     *
     * Required scope | `ecommerce:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} productId - Unique identifier for a Product
     * @param {Webflow.ProductSkuUpdate} request
     * @param {Products.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.products.update("580e63e98c9a982ac9b8b741", "580e63fc8c9a982ac9b8b745")
     */
    update(siteId: string, productId: string, request?: Webflow.ProductSkuUpdate, requestOptions?: Products.RequestOptions): Promise<Webflow.Product>;
    /**
     * Create additional SKUs to manage every [option and variant of your Product.](https://help.webflow.com/hc/en-us/articles/33961334531347-Create-product-options-and-variants)
     *
     * Creating SKUs through the API will set the product type to `Advanced`, which ensures all Product and SKU fields will be shown to users in the Designer.
     *
     * Required scope | `ecommerce:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} productId - Unique identifier for a Product
     * @param {Webflow.ProductsCreateSkuRequest} request
     * @param {Products.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.products.createSku("580e63e98c9a982ac9b8b741", "580e63fc8c9a982ac9b8b745", {
     *         skus: [{}]
     *     })
     */
    createSku(siteId: string, productId: string, request: Webflow.ProductsCreateSkuRequest, requestOptions?: Products.RequestOptions): Promise<Webflow.ProductsCreateSkuResponse>;
    /**
     * Update a specified SKU.
     *
     * Updating an existing SKU will set the Product type to `Advanced`, which ensures all Product and SKU fields will be shown to users in the Designer.
     *
     * Required scope | `ecommerce:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} productId - Unique identifier for a Product
     * @param {string} skuId - Unique identifier for a SKU
     * @param {Webflow.ProductsUpdateSkuRequest} request
     * @param {Products.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.products.updateSku("580e63e98c9a982ac9b8b741", "580e63fc8c9a982ac9b8b745", "5e8518516e147040726cc415", {
     *         sku: {}
     *     })
     */
    updateSku(siteId: string, productId: string, skuId: string, request: Webflow.ProductsUpdateSkuRequest, requestOptions?: Products.RequestOptions): Promise<Webflow.Sku>;
    protected _getAuthorizationHeader(): Promise<string>;
}
